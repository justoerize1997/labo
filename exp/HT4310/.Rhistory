geom_boxplot()+
scale_color_brewer(palette = "Set1") +
ggtitle("Alcohol por Sexo")
Datos_trabajo_1%>%
ggplot(aes(Sexo, Calorías, color= Sexo)) +
geom_boxplot()+
scale_color_brewer(palette = "Set1") +
ggtitle("Calorias por Sexo")
summary(Datos_trabajo_1)
Datos_trabajo_1%>%
ggplot(aes(Sexo, Grasas_sat, color= Sexo)) +
geom_boxplot()+
scale_color_brewer(palette = "Set1") +
ggtitle("Grasas_sat por Sexo")
Datos_trabajo_1%>%
ggplot(aes(Sexo, Alcohol, color= Sexo)) +
geom_boxplot()+
scale_color_brewer(palette = "Set1") +
ggtitle("Alcohol por Sexo")
Datos_trabajo_1%>%
ggplot(aes(Sexo, Calorías, color= Sexo)) +
geom_boxplot()+
scale_color_brewer(palette = "Set1") +
ggtitle("Calorias por Sexo")
summary(Datos_trabajo_1)
Datos_trabajo_1<-mutate(Datos_trabajo_1, if(Calorías<=1700,"CATE1")
elseif(Calorías>1700, "CATE2"))
Datos_trabajo_1<-mutate(Datos_trabajo_1, if(Calorías<=1700,"CATE1")
elseif(Calorías>1700, "CATE2"))
Datos_trabajo_1<-mutate(Datos_trabajo_1, if(Calorías<=1700,"CATE1")
elseif(Calorías>1700, "CATE2")))
Datos_trabajo_1<-mutate(Datos_trabajo_1, if(Calorías<=1700,"CATE1")
else(Calorías>1700, "CATE2")))
Datos_trabajo_1<-mutate(Datos_trabajo_1, if(Calorías<=1700,"CATE1")
else if(Calorías>1700, "CATE2")))
Datos_trabajo_1<-mutate(Datos_trabajo_1, if(Calorías<=1700,"CATE1")
else if(Calorías>1700, "CATE2"))
Datos_trabajo_1%>%
mutate(
Categoria= case_when(
Calorías <= 1700 ~ "CATE1",
Calorías > 1700 ~ "CATE3"
)
)
Datos_trabajo_1 <-
mutate(
Categoria= case_when(
Calorías <= 1700 ~ "CATE1",
Calorías > 1700 ~ "CATE3"
)
)
Datos_trabajo_1 %>%
mutate(
Categoria= case_when(
Calorías <= 1700 ~ "CATE1",
Calorías > 1700 ~ "CATE3"
)
)
View(Datos_trabajo_2)
Datos_trabajo_2<- Datos_trabajo_1%>%
mutate(Categoria = ifelse(Calorías <= 1700, "CATE1", "CATE3"))
Datos_trabajo_1<- Datos_trabajo_1%>%
mutate(Categoria = ifelse(Calorías <= 1700, "CATE1", "CATE3"))
ggplot(data=Datos_trabajo_1, mapping = aes(x=Categoria, fill=Alcohol))+
geom_bar( position = "dodge")+
labs(title="Observaciones del Consumo de Alcohol y Calorias ", x="Categoria", y="-
Alcohol")
ggplot(data=Datos_trabajo_1, mapping = aes(x=Categoria, fill=Alcohol, fill=Sexo))+
geom_bar( position = "dodge")+
labs(title="Observaciones del Consumo de Alcohol y Calorias ", x="Categoria", y="-
Alcohol")
ggplot(data=Datos_trabajo_1, mapping = aes(x=Categoria, fill=Alcohol))+
geom_bar( position = "dodge")+
labs(title="Observaciones del Consumo de Alcohol y Calorias ", x="Categoria", y="-
Alcohol")
ggplot(data=Datos_trabajo_1, mapping = aes(x=Categoria, fill=sum(Alcohol))+
geom_bar( position = "dodge")+
labs(title="Observaciones del Consumo de Alcohol y Calorias ", x="Categoria", y="-
Alcohol")
ggplot(data=Datos_trabajo_1, mapping = aes(x=Categoria, fill=sum(Alcohol))+
geom_bar( position = "dodge")+
labs(title="Observaciones del Consumo de Alcohol y Calorias ", x="Categoria", y="-
Alcohol")
ggplot(data=Datos_trabajo_1, mapping = aes(x=Categoria, fill=sum(Alcohol)))+
geom_bar( position = "dodge")+
labs(title="Observaciones del Consumo de Alcohol y Calorias ", x="Categoria", y="-
Alcohol")
ggplot(data=Datos_trabajo_1, mapping = aes(x=Categoria, fill=sum(Alcohol)))+
geom_bar( position = "dodge")+
labs(title="Observaciones del Consumo de Alcohol y Calorias ", x="Categoria", y="-
Alcohol")
install.packages("tidyverse")
ggplot(data=Datos_trabajo_1, mapping = aes(x=Categoria, sum(Alcohol)))+
geom_bar( position = "dodge")+
labs(title="Observaciones del Consumo de Alcohol y Calorias ", x="Categoria", y="-
Alcohol")
geom_bar( position = "dodge")+
labs(title="Observaciones del Consumo de Alcohol y Calorias ", x="Categoria", y="-
Alcohol")
ggplot(data=Datos_trabajo_1, mapping = aes(x=Categoria, fill=(Alcohol))+
geom_bar( position = "dodge")+
labs(title="Observaciones del Consumo de Alcohol y Calorias ", x="Categoria", y="-
Alcohol")
ggplot(data=Datos_trabajo_1, mapping = aes(x=Categoria, fill=Alcohol))+
geom_bar( position = "dodge")+
labs(title="Observaciones del Consumo de Alcohol y Calorias ", x="Categoria", y="-
Alcohol")
ggplot(data=Datos_trabajo_1, mapping = aes(x=Categoria, fill=Alcohol)+
geom_bar( position = "dodge")+
labs(title="Observaciones del Consumo de Alcohol y Calorias ", x="Categoria", y="-
Alcohol")
Datos_trabajo_1%>%
ggplot(aes(Sexo, Calorías, color= Sexo)) +
geom_boxplot()+
scale_color_brewer(palette = "Set1") +
ggtitle("Calorias por Sexo")
Datos_trabajo_1%>%
ggplot(aes(Sexo, Calorías, color= Sexo)) +
geom_boxplot()+
scale_color_brewer(palette = "Set1") +
ggtitle("Calorias por Sexo")
ggplot(data=Datos_trabajo_1, mapping = aes(x=Categoria, fill=Alcohol)+
geom_bar( position = "dodge")+
labs(title="Observaciones del Consumo de Alcohol y Calorias ", x="Categoria", y="-
Alcohol")
ggplot(data=Datos_trabajo_1, mapping = aes(x = Categoria, fill = Alcohol)+
geom_bar( position = "dodge")+
labs(title="Observaciones del Consumo de Alcohol y Calorias ", x="Categoria", y="-
Alcohol")
summary(Datos_trabajo_1)
ggplot(data=Datos_trabajo_1, mapping = aes(x=Categoria, fill=Alcohol))+
geom_bar( position = "dodge")+
labs(title="Observaciones del Consumo de Alcohol y Calorias ", x="Categoria", y="-
Alcohol")
ggplot(data=Datos_trabajo_1, mapping = aes(x=Categoria, sum(fill=Alcohol))+
geom_bar( position = "dodge")+
labs(title="Observaciones del Consumo de Alcohol y Calorias ", x="Categoria", y="-
Alcohol")
ggplot(data=Datos_trabajo_1, mapping = aes(x=Categoria, sum(fill=Alcohol))+
geom_bar( position = "dodge")+
labs(title="Observaciones del Consumo de Alcohol y Calorias ", x="Categoria", y="-
Alcohol")
ggplot(data=Datos_trabajo_1, mapping = aes(x=Categoria, sum(fill=Alcohol)))+
geom_bar( position = "dodge")+
labs(title="Observaciones del Consumo de Alcohol y Calorias ", x="Categoria", y="-
Alcohol")
ggplot(data=Datos_trabajo_1, mapping = aes(x=Categoria, fill=Alcohol))+
geom_bar( position = "dodge")+
labs(title="Observaciones del Consumo de Alcohol y Calorias ", x="Categoria", y="-
Alcohol")
ggplot(data=Datos_trabajo_1, mapping = aes(x=Categoria, y=Alcohol))+
geom_bar( position = "dodge")+
labs(title="Observaciones del Consumo de Alcohol y Calorias ", x="Categoria", y="-
Alcohol")
ggplot(data=Datos_trabajo_1, mapping = aes(x=Categoria, fill=Alcohol))+
geom_bar( position = "dodge")+
labs(title="Observaciones del Consumo de Alcohol y Calorias ", x="Categoria", y="-
Alcohol")
ggplot(data=Datos_trabajo_1, mapping = aes(x=Categoria, fill=Alcohol))+
geom_bar( position = "identity")+
labs(title="Observaciones del Consumo de Alcohol y Calorias ", x="Categoria", y="-
Alcohol")
ggplot(data=Datos_trabajo_1, mapping = aes(x=Categoria, fill=Alcohol))+
geom_bar( position = "dodge")+
labs(title="Observaciones del Consumo de Alcohol y Calorias ", x="Categoria", y="-
Alcohol")
library(ggplot2)
library(ggfortify)
data(swiss)
names(swiss)
row.names(swiss)
boxplot(swiss, col = "violet")
pca = prcomp(swiss, scale = TRUE)
summary(pca)
pca$rotation
pca$x
autoplot(pca, data = swiss, label = TRUE,
loadings = TRUE, loadings.colour = 'blue',
loadings.label = TRUE, loadings.label.size = 2)
autoplot(pca, data = swiss, label = TRUE,
loadings = TRUE, loadings.colour = 'blue'
autoplot(pca, data = swiss, label = TRUE,
ggplot(data=rank3, aes(x=Cantones, y=Indice)) +
geom_bar(stat = "identity", width=0.5,fill=ifelse(rank3[,2]>0,"red","green"))+ coord_flip()+
labs(x = "Cantones suizos",
y = "Indice")
rank <- data.frame ("Cantones"  = a,"Indice" = b)
b<-pca$x[,1]
a<-row.names(swiss)
rank <- data.frame ("Cantones"  = a,"Indice" = b)
rank
rank2<-arrange(rank,Indice)
autoplot(pca, data = swiss, label = TRUE,
loadings = TRUE, loadings.colour = 'blue',
loadings.label = TRUE, loadings.label.size = 2)
library(dplyr)
install.packages("ggfortify")
autoplot(pca, data = swiss, label = TRUE,
loadings = TRUE, loadings.colour = 'blue',
loadings.label = TRUE, loadings.label.size = 2)
b<-pca$x[,1]
a<-row.names(swiss)
rank <- data.frame ("Cantones"  = a,"Indice" = b)
rank
rank2<-arrange(rank,Indice)
rank2
rank3 = rank[order(rank$Indice), ]
ggplot(data=rank3, aes(x=Cantones, y=Indice)) +
geom_bar(stat = "identity", width=0.5,fill=ifelse(rank3[,2]>0,"red","green"))+ coord_flip()+
labs(x = "Cantones suizos",
y = "Indice")
autoplot(pca, data = swiss, label = TRUE,
loadings = TRUE, loadings.colour = 'blue',
loadings.label = TRUE, loadings.label.size = 2)
autoplot(pca, data = swiss, label = TRUE,
loadings = TRUE, loadings.colour = 'blue',
loadings.label = TRUE, loadings.label.size = 2)
knitr::opts_chunk$set(echo = TRUE)
knitr::opts_chunk$set(echo = TRUE)
title: "Componentes Principales Swiss"
output: html_document
knitr::opts_chunk$set(echo = TRUE)
pca = prcomp(swiss)
summary(pca)
pca$rotation
pca$x
pca = prcomp(swiss, scale = TRUE)
summary(pca)
pca$rotation
pca$x
library(base)
data(iris)
head(iris, 3)
attach(iris)
ir.species <- iris[, 5]
knitr::opts_chunk$set(echo = TRUE)
data(iris)
subconjunto = get_sample(row(iris), percentage_tr_rows = 0.33, seed = 987)
boxplot(subiris[,1:4], col = "pink")
subiris = iris[subconjunto,]
subconjunto = get_sample(row(iris), percentage_tr_rows = 0.33, seed = 987)
library(knitr)
library(kableExtra)
knitr::opts_chunk$set(echo = TRUE)
names<-c('X1', 'X2', 'X3', 'X4', 'X5', 'X6', 'X7', 'X8')
empresa1<-c(13, 0.94, 2.17, 5.79, 5.48, 11.1, 3.98, 5.8)
empresa2<-c(1.55, 4.3, 4.33, 5.4, 5.34, 11.01, 5.58, 8.1)
empresa3<-c(1.21, 6.9, 6.5, 4.07, 6.89, 24.76, 7.28, 14.4)
empresa4<-c(2.48, 8.69, 8.67, 7.41, 4.14, 31.59, 10.34, 17.87)
empresa5<-c(6.01,11.24,10.83,0.03,10.04,10.17,1.97,7.55)
empresa6<-c(6.74,13.13,13,1.55,5.87,6.13,1.06,3.95)
empresa7<-c(7.58,14.85,15.17,11.4,2.71,6.96,1.67,4.75)
empresa8<-c(8.01,18.16,17.33,6.33,2.56,41.52,12.37,26.23)
empresa9<-c(8.12,19.57,19.5,6.51,3.46,31.04,10.16,20.15)
empresa10<-c(11.52,21.73,21.67,5.06,5.92,43.28,12.24,26.57)
empresa11<-c(10.73,24.14,23.83,3.97,5.6,11.37,5.24,7.33)
empresa12<-c(11.99,24.81,26,4.89,4.87,9.71,4.09,6.83)
empresa13<-c(14.36,25.43,28.17,7.76,3.52,34.44,9.8,20.41)
datos<-rbind(empresa1,empresa2,empresa3,empresa4, empresa5,empresa6,empresa7,empresa8,
empresa9,empresa10,empresa11,empresa12,empresa13)
X11()
boxplot(datos)
boxplot(datos)
View(Datos_trabajo_1)
data(europe.csv)
europe <- read.csv("C:/Users/upier/Downloads/europe.csv")
View(europe)
head(europe)
library(ggplot2)
library(dplyr)
boxplot(europe, col = "blue")
Datos_trabajo_1%>%
ggplot(aes(Sexo, Grasas_sat, color= Sexo)) +
geom_boxplot(fill = 3,           # Color caja
alpha = 0.5,        # Transparencia
color = 1,          # Color del borde
outlier.colour = )+
scale_color_brewer(palette = "Set1") +
ggtitle("Boxplot Consumo de Grasas saturadas por Sexo")
scatter(europe, regline = list(col="green", lwd = 3))
scatterplot(europe, regline = list(col="green", lwd = 3))
scatter.smooth(x, y, regline = list(col="green"))
data_simple_regression_exercice_2 <- read.csv("C:/Users/upier/Downloads/data_simple_regression_exercice_2.csv", sep="")
View(data_simple_regression_exercice_2)
Data_Simple <- data_simple_regression_exercice_2
View(Data_Simple)
pairs(data_simple_regression_exercice_2)
boxplot(data_simple_regression_exercice_2)
cor(data_simple_regression_exercice_2)
regresion < − lm(y ∼ z, data = data_simple_regression_exercice_2)
regresion <− lm(y ∼ z, data = data_simple_regression_exercice_2)
summary(regresion)
plot(y$z, y$y, xlab = ’y’, ylab =
’z’)
abline(regresion)
plot(y$z, y$y, xlab = ’y’, ylab =
’z’)
plot(y$z, y$y, xlab = "y", ylab ="z")
lm(formula = y ∼ z, data = data_simple_regression_exercice_2)
valores.ajustados < − fitted(regresion)
valores.ajustados <− fitted(regresion)
plot(valores.ajustados, residuos)
nuevas.regresion <− data.frame(y = seq(30, 50))
predict(regresion, nuevas.regresion)
Cajas<-c(10, 15,10,20,25,18,12,14,16,22,24,17,13,30,24)
Cajas<-c(10, 15,10,20,25,18,12,14,16,22,24,17,13,30,24)
Distancia<-c(30,25,40,18,22,31,26,34,29,37,20,25,27,23,33)
Tiempo<-c(24,27,29,31,25,33,26,28,31,39,33,30,25,42,40)
library(ggcorrplot)
Datos = data.frame("Cajas" = Cajas, "Distancia" = Distancia, "Tiempo" = Tiempo)
data_multiple_regression_course <- read.table("C:/Users/upier/Downloads/data_multiple_regression_course.csv", quote="\"", comment.char="")
View(data_multiple_regression_course)
View(data_multiple_regression_course)
hist(data_multiple_regression_course$pemax)
boxplot(data_multiple_regression_course$pemax)
install.packages("pls")
install.packages("Matrix")
library(Matrix, lib.loc = "C:/Program Files/R/R-4.2.0/library")
install.packages("Hmisc")
library(Hmisc)
install.packages("rlist")
library(rlist)
install.packages("yaml")
library(yaml)
install.packages("primes")
library(primes)
install.packages("bit64")
library(bit64)
install.packages("IRdisplay")
library(IRdisplay)
install.packages("repr")
install.packages("repr")
install.packages("repr")
library(repr)
install.packages("vioplot")
library(vioplot)
install.packages("DT")
library(DT)
install.packages("ROCR")
library(ROCR)
install.packages("R.utils")
library(R.utils)
install.packages("Rcpp")
library(Rcpp)
install.packages("devtools")
library(devtools)
library(ggplot2)
install.packages("gganimate")
library(gganimate)
install.packages("transformr")
library(transformr)
install.packages("DiagrammeR")
library(DiagrammeR)
install.packages("data.table")
library(data.table)
install.packages("rpart")
library(rpart)
install.packages("rpart.plot")
library(rpart.plot)
install.packages("treeClust")
library(treeClust)
install.packages("cluster")
library(treeClust)
install.packages("ranger")
library(ranger)
install.packages("randomForest")
library(randomForest)
install.packages("xgboost")
library(xgboost)
install.packages("lightgbm")
library(lightgbm)
install.packages("DiceKriging")
library(DiceKriging)
install.packages("mlrMBO")
library(mlrMBO)
library( "IRkernel" )
IRkernel::installspec()
library( "IRkernel" )
IRkernel::installspec()
quit()
library( "IRkernel" )
IRkernel::installspec()
install.packages("IRkernel")
IRkernel::installspec()
quit()
#Optimizacion Bayesiana de hiperparametros de  ranger  (Random Forest)
#limpio la memoria
rm( list=ls() )  #remove all objects
gc()             #garbage collection
require("data.table")
require("rlist")
require("yaml")
require("ranger")
require("randomForest")  #solo se usa para imputar nulos
require("parallel")
ksemilla_azar  <- 1226976  #Aqui poner la propia semilla
#------------------------------------------------------------------------------
#graba a un archivo los componentes de lista
#para el primer registro, escribe antes los titulos
loguear  <- function( reg, arch=NA, folder="./work/", ext=".txt", verbose=TRUE )
{
archivo  <- arch
if( is.na(arch) )  archivo  <- paste0(  folder, substitute( reg ), ext )
if( !file.exists( archivo ) )  #Escribo los titulos
{
linea  <- paste0( "fecha\t",
paste( list.names(reg), collapse="\t" ), "\n" )
cat( linea, file= archivo )
}
linea  <- paste0( format(Sys.time(), "%Y%m%d %H%M%S"),  "\t",     #la fecha y hora
gsub( ", ", "\t", toString( reg ) ),  "\n" )
cat( linea, file= archivo, append= TRUE )  #grabo al archivo
if( verbose )  cat( linea )   #imprimo por pantalla
}
#------------------------------------------------------------------------------
#particionar agrega una columna llamada fold a un dataset que consiste en una particion estratificada segun agrupa
# particionar( data=dataset, division=c(70,30), agrupa=clase_ternaria, seed=semilla)   crea una particion 70, 30
# particionar( data=dataset, division=c(1,1,1,1,1), agrupa=clase_ternaria, seed=semilla)   divide el dataset en 5 particiones
particionar  <- function( data, division, agrupa="", campo="fold", start=1, seed=NA )
{
if( !is.na( seed)  )   set.seed( seed )
bloque  <- unlist( mapply(  function(x,y) { rep( y, x ) }, division, seq( from=start, length.out=length(division) )  ) )
data[ , (campo) :=  sample( rep( bloque, ceiling(.N/length(bloque))) )[1:.N],
by= agrupa ]
}
#------------------------------------------------------------------------------
ranger_Simple  <- function( fold_test, pdata, param )
{
#genero el modelo
set.seed(ksemilla_azar)
modelo  <- ranger( formula= "clase_binaria ~ .",
data=  pdata[ fold!= fold_test],
probability=   TRUE,  #para que devuelva las probabilidades
num.trees=     param$num.trees,
mtry=          param$mtry,
min.node.size= param$min.node.size,
max.depth=     param$max.depth
)
prediccion  <- predict( modelo, pdata[ fold == fold_test] )
ganancia_testing  <- pdata[ fold==fold_test,
sum( (prediccion$predictions[ ,"POS" ] > 1/60) *
ifelse( clase_binaria=="POS", 59000, -1000)  ) ]
return( ganancia_testing )
}
#------------------------------------------------------------------------------
ranger_CrossValidation  <- function( data, param, pcampos_buenos, qfolds, pagrupa, semilla )
{
divi  <- rep( 1, qfolds )
particionar( data, divi, seed=semilla, agrupa=pagrupa )
ganancias  <- mcmapply( ranger_Simple,
seq(qfolds), # 1 2 3 4 5
MoreArgs= list( data, param),
SIMPLIFY= FALSE,
mc.cores= 1 )   #dejar esto en  1, porque ranger ya corre en paralelo
data[ , fold := NULL ]   #elimino el campo fold
#devuelvo la ganancia promedio normalizada
ganancia_promedio  <- mean( unlist( ganancias ) )
ganancia_promedio_normalizada  <- ganancia_promedio * qfolds
return( ganancia_promedio_normalizada )
}
#------------------------------------------------------------------------------
#esta funcion solo puede recibir los parametros que se estan optimizando
#el resto de los parametros se pasan como variables globales
EstimarGanancia_ranger  <- function( x )
{
GLOBAL_iteracion  <<- GLOBAL_iteracion + 1
xval_folds  <- 5   # 5-fold cross validation
ganancia  <- ranger_CrossValidation( dataset,
param= x,
qfolds= xval_folds,
pagrupa= "clase_binaria",
semilla= ksemilla_azar )
#logueo
xx  <- x
xx$xval_folds  <-  xval_folds
xx$ganancia  <- ganancia
xx$iteracion  <- GLOBAL_iteracion
loguear( xx, arch= klog )
return( ganancia )
}
#------------------------------------------------------------------------------
#Aqui comienza el programa
#Aqui se debe poner la carpeta de la computadora local
setwd("C:\\Users\\upier\\OneDrive\\Desktop\\Posgrado\\MinDatos")   #Establezco el Working Directory
#cargo el dataset donde voy a entrenar el modelo
dataset  <- fread("./datasets/paquete_premium_202011.csv", stringsAsFactors= TRUE)   #donde entreno
#creo la carpeta donde va el experimento
# HT  representa  Hiperparameter Tuning
dir.create( "./labo/exp/",  showWarnings = FALSE )
dir.create( "./labo/exp/HT4310/", showWarnings = FALSE )
setwd("./labo/exp/HT4310/")   #Establezco el Working Directory DEL EXPERIMENTO
#en este archivo quedan el resultados
klog        <- "HT431.txt"
GLOBAL_iteracion  <- 0   #inicializo la variable global
#si ya existe el archivo log, traigo hasta donde llegue
if( file.exists(klog) )
{
tabla_log  <- fread( klog )
GLOBAL_iteracion  <- nrow( tabla_log )
}
#paso a trabajar con clase binaria POS={BAJA+2}   NEG={BAJA+1, CONTINUA}
dataset[ , clase_binaria := as.factor(ifelse( clase_ternaria=="BAJA+2", "POS", "NEG" )) ]
dataset[ , clase_ternaria := NULL ]  #elimino la clase_ternaria, ya no la necesito
#imputo los nulos, ya que ranger no acepta nulos
#Leo Breiman, ¿por que le temias a los nulos?
dataset  <- na.roughfix( dataset )
#llamo con los valores default
x  <- list( "num.trees" = 500,
"max.depth" = NULL,
"min.node_size" = NULL,
"mtry"= NULL )
EstimarGanancia_ranger( x )
